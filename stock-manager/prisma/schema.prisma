generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id        String     @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAd DateTime   @updatedAt @map("updated_at")
  categorys Category[] @relation("storeToCategory")
  sizes     Size[]     @relation("storeToSizes")
  colors    Color[]    @relation("storeToColors")
  products  Product[]  @relation("storeToProduct")
  orders    Order[]    @relation("storeToOrder")

  @@map("stores")
}

model Category {
  id        String    @id @default(uuid())
  store     Store     @relation("storeToCategory", fields: [storeId], references: [id])
  storeId   String
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAd DateTime  @updatedAt @map("updated_at")
  products  Product[] @relation("categoryToProduct")

  @@index([storeId])
  @@map("categories")
}

model Size {
  id        String    @id @default(uuid())
  store     Store     @relation("storeToSizes", fields: [storeId], references: [id])
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAd DateTime  @updatedAt @map("updated_at")
  products  Product[] @relation("sizeToProduct")

  @@index([storeId])
  @@map("sizes")
}

model Color {
  id        String    @id @default(uuid())
  store     Store     @relation("storeToColors", fields: [storeId], references: [id])
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAd DateTime  @updatedAt @map("updated_at")
  products  Product[] @relation("colorToProduct")

  @@index([storeId])
  @@map("colors")
}

model Product {
  id         String      @id @default(uuid())
  store      Store       @relation("storeToProduct", fields: [storeId], references: [id])
  storeId    String
  category   Category    @relation("categoryToProduct", fields: [categoryId], references: [id])
  categoryId String
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  size       Size        @relation("sizeToProduct", fields: [sizeId], references: [id])
  sizeId     String
  color      Color       @relation("colorToProduct", fields: [colorId], references: [id])
  colorId    String
  images     Image[]     @relation("imageToProduct")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAd  DateTime    @updatedAt @map("updated_at")
  orderItems OrderItem[] @relation("orderItemToProduct")

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@map("products")
}

model Image {
  id        String   @id @default(uuid())
  product   Product  @relation("imageToProduct", fields: [productId], references: [id], onDelete: Cascade)
  productId String
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAd DateTime @updatedAt @map("updated_at")

  @@index([productId])
  @@map("images")
}

model Order {
  id         String      @id @default(uuid())
  store      Store       @relation("storeToOrder", fields: [storeId], references: [id])
  storeId    String
  orderItems OrderItem[] @relation("orderItemToOrder")
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAd  DateTime    @updatedAt @map("updated_at")

  @@index([storeId])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  Order     Order   @relation("orderItemToOrder", fields: [orderId], references: [id])
  orderId   String
  product   Product @relation("orderItemToProduct", fields: [productId], references: [id])
  productId String

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}
